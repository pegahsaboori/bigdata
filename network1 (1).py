# -*- coding: utf-8 -*-
"""network1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AhvQXRSt_Gp_6MRyncHiLmtKIOzzyigw
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
from sklearn.preprocessing import MinMaxScaler

# خواندن فایل CSV و ذخیره داده در یک DataFrame


df = pd.read_csv('/content/gdrive/MyDrive/company2.csv')

# نرمال‌سازی ستون‌ها با استفاده از Min-Max Scaler
data = df.iloc[:, 1:]
scaler = MinMaxScaler()
normalized_data = scaler.fit_transform(data)

df_normalized = pd.DataFrame(normalized_data, columns=df.columns[1:])

# اضافه کردن ستون اول به DataFrame جدید
df_normalized.insert(0, df.columns[0], df.iloc[:, 0])

# ذخیره کردن DataFrame جدید به یک فایل CSV
df_normalized.to_csv('company2.csv', index=False)

df_normalized.head()

correlation_matrix = df_normalized.iloc[:, 1:].corr()

# نمایش نسبت همبستگی
print(correlation_matrix)

import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", square=True)
plt.title('correlation_matrix')
plt.show()

import networkx as nx
# ایجاد یک گراف خالی
G = nx.Graph()

# اضافه کردن نود‌ها به گراف
G.add_nodes_from(correlation_matrix.columns)

# اضافه کردن یال‌های با نسبت همبستگی بیشتر از 0.5 به گراف
for i, column_i in enumerate(correlation_matrix.columns):
    for j, column_j in enumerate(correlation_matrix.columns):
        if i < j and correlation_matrix.loc[column_i, column_j] > 0.5:
            G.add_edge(column_i, column_j)


plt.figure(figsize=(12, 10))  # افزایش اندازه نمایش گراف
pos = nx.spring_layout(G, seed=42)  # تعیین موقعیت نودها در گراف با تعیین یک seed ثابت
node_color = 'lightblue'
node_size = 500
edge_color = 'gray'
font_size = 10
font_family = 'sans-serif'

# رسم نود‌ها و یال‌ها با پارامترهای جدید
nx.draw_networkx_nodes(G, pos, node_color=node_color, node_size=node_size, alpha=0.8)  # افزایش شفافیت نود‌ها
nx.draw_networkx_edges(G, pos, edge_color=edge_color, alpha=0.5)  # افزایش شفافیت یال‌ها
nx.draw_networkx_labels(G, pos, font_size=font_size, font_family=font_family)

# تنظیمات نمودار
plt.title('correlation_matrix', fontsize=16, fontweight='bold')
plt.axis('off')

plt.tight_layout()  # بهبود چیدمان نمودار

plt.show()

# محاسبه درجه هر نود در گراف
degrees = dict(G.degree())

# یافتن بزرگترین درجه
max_degree = max(degrees.values())

# محاسبه متوسط درجه
avg_degree = sum(degrees.values()) / len(degrees)
max_degree_node = [node for node, degree in degrees.items() if degree == max_degree]

# نمایش بزرگترین درجه و متوسط درجه
print("بزرگترین درجه گراف:", max_degree)
print("متوسط درجه گراف:", avg_degree)
print("نود با بزرگترین درجه:", max_degree_node)

import networkx as nx
import matplotlib.pyplot as plt

# تعیین شرایط رنگ‌ها و ضخامت‌ها
node_color = []
edge_color = []
edge_width = []

for node in G.nodes:
    degree = G.degree[node]

    if 60 <= degree <= 80:
        node_color.append('red')
    elif 0 <= degree <= 50:
        node_color.append('green')
    else:
        node_color.append('blue')

for edge in G.edges:
    correlation = correlation_matrix.loc[edge[0], edge[1]]

    if correlation > 0.75:
        edge_color.append('black')
        edge_width.append(5.0)
    elif 0.5 <= correlation <= 0.75:
        edge_color.append('yellow')
        edge_width.append(2.0)
    else:
        edge_color.append('gray')
        edge_width.append(0.5)

# رسم گراف با رنگ‌ها و ضخامت‌ها
plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, seed=42)
font_size = 10
font_family = 'sans-serif'

nx.draw_networkx_nodes(G, pos, node_color=node_color, node_size=node_size, alpha=0.8)
nx.draw_networkx_edges(G, pos, edge_color=edge_color, width=edge_width, alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=font_size, font_family=font_family)

plt.title('correlation_matrix', fontsize=16, fontweight='bold')
plt.axis('off')
plt.tight_layout()

plt.show()

import networkx as nx
import matplotlib.pyplot as plt

# تعیین شرایط رنگ‌ها و ضخامت‌ها
node_color = []
edge_color = []
edge_width = []

for node in G.nodes:
    degree = G.degree[node]

    if 60 <= degree <= 80:
        node_color.append('red')
    elif 0 <= degree <= 50:
        node_color.append('green')
    else:
        node_color.append('blue')

for edge in G.edges:
    correlation = correlation_matrix.loc[edge[0], edge[1]]

    if correlation > 0.75:
        edge_color.append('black')
        edge_width.append(5.0)
    elif 0.5 <= correlation <= 0.75:
        edge_color.append('yellow')
        edge_width.append(2.0)
    else:
        edge_color.append('gray')
        edge_width.append(0.5)

# رسم گراف با رنگ‌ها و ضخامت‌ها
plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, seed=42, k=0.3)
font_size = 10
font_family = 'sans-serif'

nx.draw_networkx_nodes(G, pos, node_color=node_color, node_size=node_size, alpha=0.8)
nx.draw_networkx_edges(G, pos, edge_color=edge_color, width=edge_width, alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=font_size, font_family=font_family)

plt.title('correlation_matrix', fontsize=16, fontweight='bold')
plt.axis('off')
plt.tight_layout()

plt.show()



import networkx as nx
import matplotlib.pyplot as plt

# تعیین شرایط رنگ‌ها و ضخامت‌ها
node_color = []
edge_color = []
edge_width = []

for node in G.nodes:
    degree = G.degree[node]

    if 60 <= degree <= 70:
        node_color.append('red')
    elif 70 <= degree <= 80:
        node_color.append('black')
    elif 0 <= degree <= 50:
        node_color.append('green')
    else:
        node_color.append('orange')

for edge in G.edges:
    correlation = correlation_matrix.loc[edge[0], edge[1]]

    if correlation > 0.75:
        edge_color.append('black')
        edge_width.append(3.0)
    elif 0.5 <= correlation <= 0.75:
        edge_color.append('yellow')
        edge_width.append(2.0)
    else:
        edge_color.append('gray')
        edge_width.append(0.5)

# رسم گراف بدون لیبل
plt.figure(figsize=(12, 10))
pos = nx.spring_layout(G, seed=42, k=0.5)
font_size = 10
font_family = 'sans-serif'

nx.draw_networkx_nodes(G, pos, node_color=node_color, node_size=node_size, alpha=0.8)
nx.draw_networkx_edges(G, pos, edge_color=edge_color, width=edge_width, alpha=0.5)

plt.title('correlation_matrix', fontsize=16, fontweight='bold')
plt.axis('off')
plt.tight_layout()

plt.show()

num_edges = G.number_of_edges()
print("تعداد یال‌ها:", num_edges)

import numpy as np
import matplotlib.pyplot as plt

# محاسبه درجه هر گره
degrees = [G.degree[node] for node in G.nodes]

# محاسبه احتمال توزیع درجه
degree_probabilities, degree_bins = np.histogram(degrees, bins=range(min(degrees), max(degrees) + 2), density=True)

# رسم نمودار خطی برای توزیع درجه
plt.plot(degree_bins[:-1], degree_probabilities, marker='o')

# تنظیمات نمودار
plt.xlabel('Degree')
plt.ylabel('Probability')
plt.title('Degree Distribution')

plt.show()

components = nx.connected_components(G)
average_path_lengths = []

for component in components:
    subgraph = G.subgraph(component)
    average_path_length = nx.average_shortest_path_length(subgraph)
    average_path_lengths.append(average_path_length)

average_path_length = sum(average_path_lengths) / len(average_path_lengths)
print("متوسط طول مسیر در شبکه:", average_path_length)

clustering_coefficient = nx.average_clustering(G)
print("ضریب خوشه‌بندی متوسط گراف:", clustering_coefficient)